/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.teillet.shared.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TranscriptionRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6233861767389563673L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TranscriptionRequest\",\"namespace\":\"com.teillet.shared.avro\",\"fields\":[{\"name\":\"requestId\",\"type\":\"string\",\"doc\":\"Unique identifier for the transcription process\"},{\"name\":\"timestamp\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"},\"doc\":\"Timestamp when the transcription request was created, in ISO 8601 format\"},{\"name\":\"audioFile\",\"type\":\"string\",\"doc\":\"Name of the audio file to be transcribed\",\"default\":\"\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<TranscriptionRequest> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TranscriptionRequest> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TranscriptionRequest> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TranscriptionRequest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TranscriptionRequest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TranscriptionRequest to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TranscriptionRequest from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TranscriptionRequest instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TranscriptionRequest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Unique identifier for the transcription process */
  private java.lang.CharSequence requestId;
  /** Timestamp when the transcription request was created, in ISO 8601 format */
  private java.time.Instant timestamp;
  /** Name of the audio file to be transcribed */
  private java.lang.CharSequence audioFile;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TranscriptionRequest() {}

  /**
   * All-args constructor.
   * @param requestId Unique identifier for the transcription process
   * @param timestamp Timestamp when the transcription request was created, in ISO 8601 format
   * @param audioFile Name of the audio file to be transcribed
   */
  public TranscriptionRequest(java.lang.CharSequence requestId, java.time.Instant timestamp, java.lang.CharSequence audioFile) {
    this.requestId = requestId;
    this.timestamp = timestamp.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.audioFile = audioFile;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return requestId;
    case 1: return timestamp;
    case 2: return audioFile;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: requestId = (java.lang.CharSequence)value$; break;
    case 1: timestamp = (java.time.Instant)value$; break;
    case 2: audioFile = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'requestId' field.
   * @return Unique identifier for the transcription process
   */
  public java.lang.CharSequence getRequestId() {
    return requestId;
  }


  /**
   * Sets the value of the 'requestId' field.
   * Unique identifier for the transcription process
   * @param value the value to set.
   */
  public void setRequestId(java.lang.CharSequence value) {
    this.requestId = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return Timestamp when the transcription request was created, in ISO 8601 format
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * Timestamp when the transcription request was created, in ISO 8601 format
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'audioFile' field.
   * @return Name of the audio file to be transcribed
   */
  public java.lang.CharSequence getAudioFile() {
    return audioFile;
  }


  /**
   * Sets the value of the 'audioFile' field.
   * Name of the audio file to be transcribed
   * @param value the value to set.
   */
  public void setAudioFile(java.lang.CharSequence value) {
    this.audioFile = value;
  }

  /**
   * Creates a new TranscriptionRequest RecordBuilder.
   * @return A new TranscriptionRequest RecordBuilder
   */
  public static com.teillet.shared.avro.TranscriptionRequest.Builder newBuilder() {
    return new com.teillet.shared.avro.TranscriptionRequest.Builder();
  }

  /**
   * Creates a new TranscriptionRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TranscriptionRequest RecordBuilder
   */
  public static com.teillet.shared.avro.TranscriptionRequest.Builder newBuilder(com.teillet.shared.avro.TranscriptionRequest.Builder other) {
    if (other == null) {
      return new com.teillet.shared.avro.TranscriptionRequest.Builder();
    } else {
      return new com.teillet.shared.avro.TranscriptionRequest.Builder(other);
    }
  }

  /**
   * Creates a new TranscriptionRequest RecordBuilder by copying an existing TranscriptionRequest instance.
   * @param other The existing instance to copy.
   * @return A new TranscriptionRequest RecordBuilder
   */
  public static com.teillet.shared.avro.TranscriptionRequest.Builder newBuilder(com.teillet.shared.avro.TranscriptionRequest other) {
    if (other == null) {
      return new com.teillet.shared.avro.TranscriptionRequest.Builder();
    } else {
      return new com.teillet.shared.avro.TranscriptionRequest.Builder(other);
    }
  }

  /**
   * RecordBuilder for TranscriptionRequest instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TranscriptionRequest>
    implements org.apache.avro.data.RecordBuilder<TranscriptionRequest> {

    /** Unique identifier for the transcription process */
    private java.lang.CharSequence requestId;
    /** Timestamp when the transcription request was created, in ISO 8601 format */
    private java.time.Instant timestamp;
    /** Name of the audio file to be transcribed */
    private java.lang.CharSequence audioFile;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.teillet.shared.avro.TranscriptionRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.audioFile)) {
        this.audioFile = data().deepCopy(fields()[2].schema(), other.audioFile);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing TranscriptionRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(com.teillet.shared.avro.TranscriptionRequest other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.requestId)) {
        this.requestId = data().deepCopy(fields()[0].schema(), other.requestId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.audioFile)) {
        this.audioFile = data().deepCopy(fields()[2].schema(), other.audioFile);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'requestId' field.
      * Unique identifier for the transcription process
      * @return The value.
      */
    public java.lang.CharSequence getRequestId() {
      return requestId;
    }


    /**
      * Sets the value of the 'requestId' field.
      * Unique identifier for the transcription process
      * @param value The value of 'requestId'.
      * @return This builder.
      */
    public com.teillet.shared.avro.TranscriptionRequest.Builder setRequestId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.requestId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'requestId' field has been set.
      * Unique identifier for the transcription process
      * @return True if the 'requestId' field has been set, false otherwise.
      */
    public boolean hasRequestId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'requestId' field.
      * Unique identifier for the transcription process
      * @return This builder.
      */
    public com.teillet.shared.avro.TranscriptionRequest.Builder clearRequestId() {
      requestId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * Timestamp when the transcription request was created, in ISO 8601 format
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * Timestamp when the transcription request was created, in ISO 8601 format
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.teillet.shared.avro.TranscriptionRequest.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[1], value);
      this.timestamp = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * Timestamp when the transcription request was created, in ISO 8601 format
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * Timestamp when the transcription request was created, in ISO 8601 format
      * @return This builder.
      */
    public com.teillet.shared.avro.TranscriptionRequest.Builder clearTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'audioFile' field.
      * Name of the audio file to be transcribed
      * @return The value.
      */
    public java.lang.CharSequence getAudioFile() {
      return audioFile;
    }


    /**
      * Sets the value of the 'audioFile' field.
      * Name of the audio file to be transcribed
      * @param value The value of 'audioFile'.
      * @return This builder.
      */
    public com.teillet.shared.avro.TranscriptionRequest.Builder setAudioFile(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.audioFile = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'audioFile' field has been set.
      * Name of the audio file to be transcribed
      * @return True if the 'audioFile' field has been set, false otherwise.
      */
    public boolean hasAudioFile() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'audioFile' field.
      * Name of the audio file to be transcribed
      * @return This builder.
      */
    public com.teillet.shared.avro.TranscriptionRequest.Builder clearAudioFile() {
      audioFile = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TranscriptionRequest build() {
      try {
        TranscriptionRequest record = new TranscriptionRequest();
        record.requestId = fieldSetFlags()[0] ? this.requestId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.time.Instant) defaultValue(fields()[1]);
        record.audioFile = fieldSetFlags()[2] ? this.audioFile : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TranscriptionRequest>
    WRITER$ = (org.apache.avro.io.DatumWriter<TranscriptionRequest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TranscriptionRequest>
    READER$ = (org.apache.avro.io.DatumReader<TranscriptionRequest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










